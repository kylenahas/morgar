'##################################################################################
'##################################################################################
'#####                                                                        #####
'#####                              ~~ MORGAR ~~                             ##### 
'#####                                                                        #####
'#####                                                                        #####
'##################################################################################
'##################################################################################
'
' This is an example game for the MPF-VPX bridge by jabdoa2 and mfuegemann
'
' cGameName will not be checked. The Controller will connect to the MPF currently running
' 1. start VPX as Administrator
' 2. start MPF, wait until the display has been initialized 
' 3. start VPX table
'
'
' What to do in VPX:
'
' add Set Controller = CreateObject("MPF.Controller")
' add a Timer MPFTimer with an interval of 10..50. Keep this well below the minimal default_pulse_ms set in MPF for solenoids
' add Sub MPFTimer_Timer as it is in the demo
'
' in Table_Init 
' - call Controller.run
' - set the Trough switch(es) or create balls for the Trough
' - init NC switches to False
'
' in Drain_Hit (for 1-Ball games)
' - set the Trough switch(es) 
'
' to use autofire_coils
' - add a droppable wall to each bumper. This will be used in Sub CheckAutofireCoils to disable/enable the bumper
' - if necessary place an invisible wall behind the slingshots to stop the ball once the slingshots are disabled
' - add each autofire object in VPX to Sub CheckAutofireCoils
' - use the normal Slingshot_Slingshot and Bumper_Hit events
'
' switch handling
' - add Controller.Switch(MPFSwitchNumber)=SwitchState to the Switch_Hit/_Unhit events. Use "" to include string type numbers
' - add Controller.PulseSW(MPFSwitchNumber) to the Switch_Hit event of targets, slingshots and bumpers
' 
' controlled lights 
' LEDs and lamps
' - create a collection "ControlledLamps"
' - assign all controlled VPX lamps (Matrix, GI, LED, Flashers) to the collection "ControlledLamps" and call InitLamps
' - in Sub UpdateLamps add a case for every MPF light and LED number, setting the state of the VPX lamp/LED. Use "" to include string type numbers
'
' GI strings 
' - create a collection for each GI string, assign the GI lamps to the collections as needed
' - assign all GI lamps to the collection "ControlledLamps" and call InitLamps
' - in Sub UpdateGI add a case for every MPF gi string number, setting the state of the VPX GI collection. Use "" to include string type numbers
'
' flashers
' - assign all flasher lamps to the collection "ControlledLamps" and call InitLamps
' - in Sub UpdateFlashers add a case for every MPF flasher number, setting the state of the VPX flasher. Use "" to include string type numbers
'
' solenoids
' - add all normal solenoids to the Sub InitSolenoids
' - in Sub UpdateSolenoids add a case for every MPF coil number, setting the state of the VPX solenoid. Use "" to include string type numbers
'
' flippers
' - add the Flipper routines (Solenoids and KeyUp/KeyDown)
' 
' to exit a game shut down the VPX table first


Option Explicit
On Error Resume Next
ExecuteGlobal GetTextFile("controller.vbs")
If Err Then MsgBox "You need the Controller.vbs file in order to run this table (installed with the VPX package in the scripts folder)"
On Error Goto 0

If Table1.ShowDT = false then
    Scoretext.Visible = false
End If

Dim EnableBallControl
EnableBallControl = false 'Change to true to enable manual ball control (or press C in-game) via the arrow keys and B (boost movement) keys

Const BallSize = 25  'Ball radius

Const cGameName = "MorGar"

'--------------------------
'------  Table Init  ------
'--------------------------
'### MPF ###
Set Controller = CreateObject("MPF.Controller")

Sub Table1_Init
    Controller.GameName=cGameName
    Controller.Run 
    If Err Then MsgBox Err.Description
    On Error Goto 0

	'### MPF ###
	'init Trough with correct number of Balls and set Trough switches
	'Ball 1
	Kicker1.createBall
	Kicker1.kick 110,1
	'Ball 2
	Kicker1.createBall
	Kicker1.kick 110,1
	'Ball 3
	Kicker1.createBall
	Kicker1.kick 110,1

	'init NC switches
	Controller.Switch(12) = False

End Sub


'--------------------------
'------  MPF Update  ------
'--------------------------
'ChgObj(ii,0) --> Number
'ChgObj(ii,1) --> State

InitLamps()
InitSolenoids()

Sub MPFTimer_Timer
	Dim ii,ChgLamp,ChgGIString,ChgSol,ChgLED,ChgFlasher

	'Process Changed Lights
	ChgLamp = Controller.ChangedLamps
	if not isempty(ChgLamp) Then	
		for ii=0 to UBound(ChgLamp)
			UpdateLamps ChgLamp(ii,0), ChgLamp(ii,1)
		Next
	end If

	'Process Changed LEDs
	ChgLED = Controller.ChangedLEDs
	if not isempty(ChgLED) Then	
		for ii=0 to UBound(ChgLED)
			UpdateLamps ChgLED(ii,0), ChgLED(ii,1)
		Next
	end If

	'Process Changed Flashers
	ChgFlasher = Controller.ChangedFlashers
	if not isempty(ChgFlasher) Then	
		for ii=0 to UBound(ChgFlasher)
			UpdateFlashers ChgFlasher(ii,0), ChgFlasher(ii,1)
		Next
	end If

	'Process Changed GI Strings
	ChgGIString = Controller.ChangedGIStrings
	if not isempty(ChgGIString) Then	
		for ii=0 to UBound(ChgGIString)
			UpdateGI ChgGIString(ii,0), ChgGIString(ii,1)
		Next
	end If

	'Process Changed Solenoids (only non Autofire Coils)
	ChgSol = Controller.ChangedSolenoids
	if not isempty(ChgSol) Then	
		for ii=0 to UBound(ChgSol)
			UpdateSolenoids ChgSol(ii,0), ChgSol(ii,1)
		Next
	end If
 
	'Process Hardware Rules to enable Autofire Coils
	CheckAutofireCoils
	'or
	'ProcessHardwareRules

	UpdateStatusLights
End Sub

Sub UpdateStatusLights
	'### just visualization
	if BumperActive then
		BumperLight.state = 1
	Else
		BumperLight.state = 0
	end If
	if LeftSlingActive then
		LSlingLight.state = 1
	Else
		LSlingLight.state = 0
	end If
	if RightSlingActive then
		RSlingLight.state = 1
	Else
		RSlingLight.state = 0
	end If
	if LeftFlipperActive then
		LFLight.state = 1
	Else
		LFLight.state = 0
	end If
	if RightFlipperActive then
		RFLight.state = 1
	Else
		RFLight.state = 0
	end If

	'show the NC switch state
	NCSwitchLight.state = Controller.Switch(12)
End Sub



'Autofire Coils

Dim LeftSlingActive, RightSlingActive, BumperActive, LeftFlipperActive, RightFlipperActive

'Approach A - check each autofire coil (prefered)

Sub CheckAutofireCoils
	LeftFlipperActive = controller.IsCoilActive("coil2") or controller.IsCoilActive("42")
	RightFlipperActive = controller.IsCoilActive("coil3") or controller.IsCoilActive("43")
	LeftSlingActive = controller.IsCoilActive("coil4")
	RightSlingActive = controller.IsCoilActive("coil5")
	BumperActive = controller.IsCoilActive("coil6")

	LeftFlipper.enabled = LeftFlipperActive
	if not LeftFlipperActive Then
		SolLeftFlipper(False)
	end If
	RightFlipper.enabled = RightFlipperActive 
	if not RightFlipperActive Then
		SolRightFlipper(False)
	end If
	LeftSlingShot.collidable = LeftSlingActive 	
	RightSlingShot.collidable = RightSlingActive 	
	Bumper1Wall.isdropped = BumperActive 	
End Sub

'Approach B - get all active hw rules (not used here)
'HWRules(ii,0) --> Switch number
'HWRules(ii,1) --> Solenoid number
'HWRules(ii,2) --> Hold (Boolean)

Sub ProcessHardwareRules
	Dim HWRules,kk
	HWRules = Controller.HardwareRules

	LeftSlingActive = False
	RightSlingActive = False
	BumperActive = False
	LeftFlipperActive = False
	RightFlipperActive = False

	if not isempty(HWRules) Then	
		for kk=0 to UBound(HWRules)
			select case cstr(HWRules(kk,1))
				Case "coil4":	LeftSlingActive = True	'Left SlingShot
				Case "coil5":	RightSlingActive = True	'Right SlingShot
				Case "coil6":	BumperActive = True	'Bumper
				Case "coil2":	LeftFlipperActive = True	'Left Flipper
				Case "42":		LeftFlipperActive = True	'Left Flipper Hold
				Case "coil3":	RightFlipperActive = True	'Right Flipper
				Case "43":		RightFlipperActive = True	'Right Flipper Hold
			end select
		Next
	end If

	LeftFlipper.enabled = LeftFlipperActive
	if not LeftFlipperActive Then
		SolLeftFlipper(False)
	end If
	RightFlipper.enabled = RightFlipperActive 
	if not RightFlipperActive Then
		SolRightFlipper(False)
	end If
	LeftSlingShot.collidable = LeftSlingActive 	
	RightSlingShot.collidable = RightSlingActive 	
	Bumper1Wall.isdropped = BumperActive 	
End Sub


'Lamps + LEDs
' Top rollover lights are MPF Subtype "matrix"
' Center running lights are MPF Subtype "led"

Sub UpdateLamps(LampNoPar,StatePar)
	'add a case for every MPF light number, setting the state of the VPX lamp
	select Case LampNoPar
		Case "l-1":	L1.state = StatePar
		Case "l-2":	L2.state = StatePar
		Case "l-3":	L3.state = StatePar
		Case "l-4": TopA.state = StatePar
		Case "l-5": TopB.state = StatePar
		Case "l-6": TopC.state = StatePar
		Case "l-5k": Target5KLight.state = StatePar
	End Select
End Sub


'GI
' The four bulbs below the slingshots are MPF Subtype "gi"
Sub UpdateGI(GIStringPar,StatePar)
	'add a case for every MPF GI string number, setting the state of the VPX lamp/collection
	Dim obj
	select Case GIStringPar
		Case "gi1":
			for each obj in GI
				obj.state = StatePar
			Next
	End Select
End Sub


'Flashers
' The right hole light is of MPF Subtype "flasher"
Sub UpdateFlashers(FlasherNoPar,StatePar)
	select Case FlasherNoPar
		Case "2":	LHole.state = StatePar
	End Select
End Sub


Sub InitLamps
	'assign all controlled VPX lamps to the collection "ControlledLamps"
	Dim obj
	for each obj in ControlledLamps
		obj.state = 0
	Next
End Sub


'Solenoids 
'normal solenoids, autofire_coils are handled separately 

Sub UpdateSolenoids(SolNoPar,StatePar)
	'add a case for every MPF coil number, setting the state of the VPX solenoid
	select Case SolNoPar
		Case "coil1":	Sol1(StatePar)	'Ball Release
		Case "coil7":	Sol7(StatePar)	'Auto-Plunger
		Case "coil8":	Sol8(StatePar)	'Right Hole
	End Select
End Sub

Sub InitSolenoids
	'add a call for every normal VPX Solenoid 
	Sol1(False)	'Ball Release
	Sol7(False)	'Auto-Plunger
	Sol8(False)	'Right Hole
End Sub



'-----------------------------------
'------  Solenoid Assignment  ------
'-----------------------------------

'Sol1 Ball Release
Sub Sol1(enabled)
	if enabled Then
		If controller.Switch("tr1") then
			BallRelease.Pullback
			BallRelease.Timerenabled = True
		End If
	end If		
End Sub

Sub BallRelease_Timer
	BallRelease.Timerenabled = False
	BallRelease.Fire
	PlaySound SoundFX("ballrelease",DOFContactors), 0,1,AudioPan(BallRelease),0.25,0,0,1,AudioFade(BallRelease)
End Sub


'Sol7 Auto-Plunger
Sub Sol7(enabled)
	if enabled Then
		Plunger.Pullback
		Plunger.Timerenabled = True
	end If		
End Sub

Sub Plunger_Timer
	Plunger.Timerenabled = False
	Plunger.Fire
	PlaySound "plunger",0,1,AudioPan(Plunger),0.25,0,0,1,AudioFade(Plunger)
End Sub

'Sol8 Hole
Sub Sol8(enabled)
	if enabled Then
		If controller.Switch("hole") then
			RightHole.kick 225, 10
			controller.Switch("hole") = False
			PlaySound SoundFX("popper_ball",DOFContactors), 0,1,AudioPan(RightHole),0.25,0,0,1,AudioFade(RightHole)
		End If
	end If		
End Sub



'Flippers are handled as autofire_coils

'Left Flipper
Dim LFlipperWasUp:LFlipperWasUp=False
Sub SolLeftFlipper(enabled)
	if enabled Then
		if not LFlipperWasUp then
			LFlipperWasUp = True
			LeftFlipper.RotateToEnd
			PlaySound SoundFX("fx_flipperup",DOFFlippers), 0, .67, AudioPan(LeftFlipper), 0.05,0,0,1,AudioFade(LeftFlipper)
		end If
	else
		if LFlipperWasUp then
			LFlipperWasUp = False
			LeftFlipper.RotateToStart
			PlaySound SoundFX("fx_flipperdown",DOFFlippers), 0, 1, AudioPan(LeftFlipper), 0.05,0,0,1,AudioFade(LeftFlipper)
		end If
	end If		
End Sub

'Right Flipper
Dim RFlipperWasUp:RFlipperWasUp=False
Sub SolRightFlipper(enabled)
	if enabled Then
		if not RFlipperWasUp then
			RFlipperWasUp = True
			RightFlipper.RotateToEnd
			PlaySound SoundFX("fx_flipperup",DOFFlippers), 0, .67, AudioPan(RightFlipper), 0.05,0,0,1,AudioFade(RightFlipper)
		end If
	else
		if RFlipperWasUp then
			RFlipperWasUp = False
			RightFlipper.RotateToStart
			PlaySound SoundFX("fx_flipperdown",DOFFlippers), 0, 1, AudioPan(RightFlipper), 0.05,0,0,1,AudioFade(RightFlipper)
		end If	
	end If		
End Sub


'------------------------
'------  Keyboard  ------
'------------------------

'### MPF ###
'pass the MPF switch number

Sub Table1_KeyDown(ByVal keycode)
	if keycode = StartGameKey Then
		Controller.Switch(0) = True
	End If

	If keycode = LeftFlipperKey Then
		Controller.Switch(2) = True
		if LeftFlipperActive Then
			SolLeftFlipper(True)
		End If
	End If

	If keycode = RightFlipperKey Then
		Controller.Switch(3) = True
		if RightFlipperActive Then
			SolRightFlipper(True)
		End If
	End If

	If keycode = LeftTiltKey Then
		Nudge 90, 2
	End If

	If keycode = RightTiltKey Then
		Nudge 270, 2
	End If

	If keycode = CenterTiltKey Then
		Nudge 0, 2
	End If


    ' Manual Ball Control
	If keycode = 46 Then	 				' C Key
		If EnableBallControl = 1 Then
			EnableBallControl = 0
		Else
			EnableBallControl = 1
		End If
	End If
    If EnableBallControl = 1 Then
		If keycode = 48 Then 				' B Key
			If BCboost = 1 Then
				BCboost = BCboostmulti
			Else
				BCboost = 1
			End If
		End If
		If keycode = 203 Then BCleft = 1	' Left Arrow
		If keycode = 200 Then BCup = 1		' Up Arrow
		If keycode = 208 Then BCdown = 1	' Down Arrow
		If keycode = 205 Then BCright = 1	' Right Arrow
	End If
End Sub

Sub Table1_KeyUp(ByVal keycode)
	if keycode = StartGameKey Then
		Controller.Switch(0) = False
	End If

	If keycode = LeftFlipperKey Then
		Controller.Switch(2) = False
		SolLeftFlipper(False)
	End If

	If keycode = RightFlipperKey Then
		Controller.Switch(3) = False
		SolRightFlipper(False)	
	End If

    'Manual Ball Control
	If EnableBallControl = 1 Then
		If keycode = 203 Then BCleft = 0	' Left Arrow
		If keycode = 200 Then BCup = 0		' Up Arrow
		If keycode = 208 Then BCdown = 0	' Down Arrow
		If keycode = 205 Then BCright = 0	' Right Arrow
	End If
End Sub



'------------------------
'------  Switches  ------
'------------------------

'### MPF ###
Sub RightHole_Hit:Controller.Switch("hole") = True:PlaySound SoundFX("kicker_enter_center",DOFContactors), 0,0.5,AudioPan(RightHole),0.25,0,0,1,AudioFade(RightHole):End Sub

Sub Trough1_hit:Controller.Switch("tr1") = True:End Sub
Sub Trough1_unhit:Controller.Switch("tr1") = False:End Sub
Sub Trough2_hit:Controller.Switch("tr2") = True:End Sub
Sub Trough2_unhit:Controller.Switch("tr2") = False:End Sub
Sub Trough3_hit:Controller.Switch("tr3") = True:End Sub
Sub Trough3_unhit:Controller.Switch("tr3") = False:End Sub

Sub PlungerLaneTrigger_hit:Controller.Switch(7) = True:End Sub
Sub PlungerLaneTrigger_unhit:Controller.Switch(7) = False:End Sub

Sub Trigger_EnterPF_hit:Controller.Switch(12) = True:End Sub
Sub Trigger_EnterPF_unhit:Controller.Switch(12) = False:End Sub

'To pulse a Target, use the Controller.PulseSW command
Sub Bumper1_hit:Controller.PulseSw(6):PlaySound SoundFX("fx_bumper1",DOFContactors), 0,1,AudioPan(Bumper1),0.25,0,0,1,AudioFade(Bumper1):End Sub
Sub Target11_Hit:Controller.PulseSw(11):End Sub

' it is possible to use strings to identify switches
Sub Trigger_A1_hit:Controller.Switch("swa") = True:End Sub
Sub Trigger_A1_unhit:Controller.Switch("swa") = False:End Sub
Sub Trigger_B1_hit:Controller.Switch("swb") = True:End Sub
Sub Trigger_B1_unhit:Controller.Switch("swb") = False:End Sub
Sub Trigger_C1_hit:Controller.Switch("swc") = True:End Sub
Sub Trigger_C1_unhit:Controller.Switch("swc") = False:End Sub

Sub LeftInlane_hit:Controller.Switch(9) = True:End Sub
Sub LeftInlane_unhit:Controller.Switch(9) = False:End Sub
Sub RightInlane_hit:Controller.Switch(10) = True:End Sub
Sub RightInlane_unhit:Controller.Switch(10) = False:End Sub









'**********Sling Shot Animations
' Rstep and Lstep  are the variables that increment the animation
'****************
Dim RStep, Lstep

'### some MPF additions to pulse the slingshot triggers

Sub RightSlingShot_Slingshot
	'### MPF ###
	Controller.PulseSw(5)

    PlaySound SoundFX("right_slingshot",DOFContactors), 0,1, 0.05,0.05 '0,1, AudioPan(RightSlingShot), 0.05,0,0,1,AudioFade(RightSlingShot)
    RSling.Visible = 0
    RSling1.Visible = 1
    sling1.rotx = 20
    RStep = 0
    RightSlingShot.TimerEnabled = 1
End Sub

Sub RightSlingShot_Timer
    Select Case RStep
        Case 3:RSLing1.Visible = 0:RSLing2.Visible = 1:sling1.rotx = 10
        Case 4:RSLing2.Visible = 0:RSLing.Visible = 1:sling1.rotx = 0:RightSlingShot.TimerEnabled = 0
    End Select
    RStep = RStep + 1
End Sub

Sub LeftSlingShot_Slingshot
	'### MPF ###
	Controller.PulseSw(4)

    PlaySound SoundFX("left_slingshot",DOFContactors), 0,1, -0.05,0.05 '0,1, AudioPan(LeftSlingShot), 0.05,0,0,1,AudioFade(LeftSlingShot)
    LSling.Visible = 0
    LSling1.Visible = 1
    sling2.rotx = 20
    LStep = 0
    LeftSlingShot.TimerEnabled = 1
End Sub

Sub LeftSlingShot_Timer
    Select Case LStep
        Case 3:LSLing1.Visible = 0:LSLing2.Visible = 1:sling2.rotx = 10
        Case 4:LSLing2.Visible = 0:LSLing.Visible = 1:sling2.rotx = 0:LeftSlingShot.TimerEnabled = 0
    End Select
    LStep = LStep + 1
End Sub











'### below is the unchanged standard VPX sound code ###


'*********************************************************************
'                 Positional Sound Playback Functions
'*********************************************************************

' Play a sound, depending on the X,Y position of the table element (especially cool for surround speaker setups, otherwise stereo panning only)
' parameters (defaults): loopcount (1), volume (1), randompitch (0), pitch (0), useexisting (0), restart (1))
' Note that this will not work (currently) for walls/slingshots as these do not feature a simple, single X,Y position
Sub PlayXYSound(soundname, tableobj, loopcount, volume, randompitch, pitch, useexisting, restart)
	PlaySound soundname, loopcount, volume, AudioPan(tableobj), randompitch, pitch, useexisting, restart, AudioFade(tableobj)
End Sub

' Similar subroutines that are less complicated to use (e.g. simply use standard parameters for the PlaySound call)
Sub PlaySoundAt(soundname, tableobj)
    PlaySound soundname, 1, 1, AudioPan(tableobj), 0,0,0, 1, AudioFade(tableobj)
End Sub

Sub PlaySoundAtBall(soundname)
    PlaySoundAt soundname, ActiveBall
End Sub


'*********************************************************************
'                     Supporting Ball & Sound Functions
'*********************************************************************

Function AudioFade(tableobj) ' Fades between front and back of the table (for surround systems or 2x2 speakers, etc), depending on the Y position on the table. "table1" is the name of the table
	Dim tmp
    tmp = tableobj.y * 2 / table1.height-1
    If tmp > 0 Then
		AudioFade = Csng(tmp ^10)
    Else
        AudioFade = Csng(-((- tmp) ^10) )
    End If
End Function

Function AudioPan(tableobj) ' Calculates the pan for a tableobj based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = tableobj.x * 2 / table1.width-1
    If tmp > 0 Then
        AudioPan = Csng(tmp ^10)
    Else
        AudioPan = Csng(-((- tmp) ^10) )
    End If
End Function

Function Vol(ball) ' Calculates the Volume of the sound based on the ball speed
    Vol = Csng(BallVel(ball) ^2 / 2000)
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function


'*****************************************
'   rothbauerw's Manual Ball Control
'*****************************************

Dim BCup, BCdown, BCleft, BCright
Dim ControlBallInPlay, ControlActiveBall
Dim BCvel, BCyveloffset, BCboostmulti, BCboost

BCboost = 1				'Do Not Change - default setting
BCvel = 4				'Controls the speed of the ball movement
BCyveloffset = -0.01 	'Offsets the force of gravity to keep the ball from drifting vertically on the table, should be negative
BCboostmulti = 3		'Boost multiplier to ball veloctiy (toggled with the B key) 

ControlBallInPlay = false

Sub StartBallControl_Hit()
	Set ControlActiveBall = ActiveBall
	ControlBallInPlay = true
End Sub

Sub StopBallControl_Hit()
	ControlBallInPlay = false
End Sub	

Sub BallControlTimer_Timer()
	If EnableBallControl and ControlBallInPlay then
		If BCright = 1 Then
			ControlActiveBall.velx =  BCvel*BCboost
		ElseIf BCleft = 1 Then
			ControlActiveBall.velx = -BCvel*BCboost
		Else
			ControlActiveBall.velx = 0
		End If

		If BCup = 1 Then
			ControlActiveBall.vely = -BCvel*BCboost
		ElseIf BCdown = 1 Then
			ControlActiveBall.vely =  BCvel*BCboost
		Else
			ControlActiveBall.vely = bcyveloffset
		End If
	End If
End Sub


'*****************************************
'      JP's VP10 Rolling Sounds
'*****************************************

Const tnob = 5 ' total number of balls
ReDim rolling(tnob)
InitRolling

Sub InitRolling
    Dim i
    For i = 0 to tnob
        rolling(i) = False
    Next
End Sub

Sub RollingTimer_Timer()
    Dim BOT, b
    BOT = GetBalls

	' stop the sound of deleted balls
    For b = UBound(BOT) + 1 to tnob
        rolling(b) = False
        StopSound("fx_ballrolling" & b)
    Next

	' exit the sub if no balls on the table
    If UBound(BOT) = -1 Then Exit Sub

	' play the rolling sound for each ball
    For b = 0 to UBound(BOT)
        If BallVel(BOT(b) ) > 1 AND BOT(b).z < 30 Then
            rolling(b) = True
            PlaySound("fx_ballrolling" & b), -1, Vol(BOT(b)), AudioPan(BOT(b)), 0, Pitch(BOT(b)), 1, 0, AudioFade(BOT(b))
        Else
            If rolling(b) = True Then
                StopSound("fx_ballrolling" & b)
                rolling(b) = False
            End If
        End If
    Next
End Sub

'**********************
' Ball Collision Sound
'**********************

Sub OnBallBallCollision(ball1, ball2, velocity)
	PlaySound("fx_collide"), 0, Csng(velocity) ^2 / 2000, AudioPan(ball1), 0, Pitch(ball1), 0, 0, AudioFade(ball1)
End Sub


'*****************************************
'	ninuzzu's	FLIPPER SHADOWS
'*****************************************

sub FlipperTimer_Timer()
	FlipperLSh.RotZ = LeftFlipper.currentangle
	FlipperRSh.RotZ = RightFlipper.currentangle

End Sub

'*****************************************
'	ninuzzu's	BALL SHADOW
'*****************************************
Dim BallShadow
BallShadow = Array (BallShadow1,BallShadow2,BallShadow3,BallShadow4,BallShadow5)

Sub BallShadowUpdate_timer()
    Dim BOT, b
    BOT = GetBalls
    ' hide shadow of deleted balls
    If UBound(BOT)<(tnob-1) Then
        For b = (UBound(BOT) + 1) to (tnob-1)
            BallShadow(b).visible = 0
        Next
    End If
    ' exit the Sub if no balls on the table
    If UBound(BOT) = -1 Then Exit Sub
    ' render the shadow for each ball
    For b = 0 to UBound(BOT)
        If BOT(b).X < Table1.Width/2 Then
            BallShadow(b).X = ((BOT(b).X) - (Ballsize/6) + ((BOT(b).X - (Table1.Width/2))/7)) + 6
        Else
            BallShadow(b).X = ((BOT(b).X) + (Ballsize/6) + ((BOT(b).X - (Table1.Width/2))/7)) - 6
        End If
        ballShadow(b).Y = BOT(b).Y + 12
        If BOT(b).Z > 20 Then
            BallShadow(b).visible = 1
        Else
            BallShadow(b).visible = 0
        End If
    Next
End Sub



'************************************
' What you need to add to your table
'************************************

' a timer called RollingTimer. With a fast interval, like 10
' one collision sound, in this script is called fx_collide
' as many sound files as max number of balls, with names ending with 0, 1, 2, 3, etc
' for ex. as used in this script: fx_ballrolling0, fx_ballrolling1, fx_ballrolling2, fx_ballrolling3, etc


'******************************************
' Explanation of the rolling sound routine
'******************************************

' sounds are played based on the ball speed and position

' the routine checks first for deleted balls and stops the rolling sound.

' The For loop goes through all the balls on the table and checks for the ball speed and 
' if the ball is on the table (height lower than 30) then then it plays the sound
' otherwise the sound is stopped, like when the ball has stopped or is on a ramp or flying.

' The sound is played using the VOL, AUDIOPAN, AUDIOFADE and PITCH functions, so the volume and pitch of the sound
' will change according to the ball speed, and the AUDIOPAN & AUDIOFADE functions will change the stereo position
' according to the position of the ball on the table.


'**************************************
' Explanation of the collision routine
'**************************************

' The collision is built in VP.
' You only need to add a Sub OnBallBallCollision(ball1, ball2, velocity) and when two balls collide they 
' will call this routine. What you add in the sub is up to you. As an example is a simple Playsound with volume and paning
' depending of the speed of the collision.


Sub Pins_Hit (idx)
	PlaySound "pinhit_low", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 0, 0, AudioFade(ActiveBall)
End Sub

Sub Targets_Hit (idx)
	PlaySound "target", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 0, 0, AudioFade(ActiveBall)
End Sub

Sub Metals_Thin_Hit (idx)
	PlaySound "metalhit_thin", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Metals_Medium_Hit (idx)
	PlaySound "metalhit_medium", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Metals2_Hit (idx)
	PlaySound "metalhit2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Gates_Hit (idx)
	PlaySound "gate4", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
End Sub

Sub Spinner_Spin
	PlaySound "fx_spinner", 0, .25, AudioPan(Spinner), 0.25, 0, 0, 1, AudioFade(Spinner)
End Sub

Sub Rubbers_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 20 then 
		PlaySound "fx_rubber2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End if
	If finalspeed >= 6 AND finalspeed <= 20 then
 		RandomSoundRubber()
 	End If
End Sub

Sub Posts_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
		PlaySound "fx_rubber2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		RandomSoundRubber()
 	End If
End Sub

Sub RandomSoundRubber()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound "rubber_hit_1", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 2 : PlaySound "rubber_hit_2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 3 : PlaySound "rubber_hit_3", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End Select
End Sub

Sub LeftFlipper_Collide(parm)
 	RandomSoundFlipper()
End Sub

Sub RightFlipper_Collide(parm)
 	RandomSoundFlipper()
End Sub

Sub RandomSoundFlipper()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound "flip_hit_1", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 2 : PlaySound "flip_hit_2", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
		Case 3 : PlaySound "flip_hit_3", 0, Vol(ActiveBall), AudioPan(ActiveBall), 0, Pitch(ActiveBall), 1, 0, AudioFade(ActiveBall)
	End Select
End Sub




'***************************************
'**     Original Code Starts Here     **
'***************************************




Option Explicit

On Error Resume Next
ExecuteGlobal GetTextFile("controller.vbs")
If Err Then MsgBox "You need the controller.vbs in order to run this table, available in the vp10 package"
On Error Goto 0

LoadVPM "01300000","S6.VBS",3.1

'********************************************
'**     Game Specific Code Starts Here     **
'********************************************

Const UseSolenoids=1,UseLamps=1,UseSync=1
Const SSolenoidOn="solon",SSolenoidOff="soloff",SFlipperOn="FlipperUp",SFlipperOff="FlipperDown",SCoin="quarter"


'**************************************
'**     Bind Events To Solenoids     **
'**************************************

SolCallback(1)	= "bsTrough.SolOut"
SolCallBack(2)	= "bsLKicker.SolOut"
SolCallback(3)	= "GARtargets.SolDropUp"
SolCallback(4)	= "GORtargets.SolDropUp"
SolCallback(5)	= "mMagnet.MagnetOn="
SolCallback(6)  = "MagnetFlash"
SolCallback(14)	= "vpmSolSound SoundFX(""knocker"",DOFKnocker),"
'SolCallback(17)	= "vpmSolSound SoundFX(""bumper1"",DOFContactors),"  
'SolCallback(18)	= "vpmSolSound SoundFX(""bumper2"",DOFContactors),"  
'SolCallback(19)	= "vpmSolSound SoundFX(""bumper3"",DOFContactors),"  
'SolCallback(20)	= "vpmSolSound SoundFX(""sling"",DOFContactors),"
'SolCallback(21)	= "vpmSolSound SoundFX(""sling"",DOFContactors),"
SolCallback(23) = "vpmNudge.SolGameOn"
SolCallback(sLRFlipper) = "SolRFlipper"
SolCallback(sLLFlipper) = "SolLFlipper"

Sub SolLFlipper(Enabled)
	If Enabled Then
		PlaySound SoundFX("fx_flipperup",DOFContactors):LeftFlipper.RotateToEnd
	Else
		PlaySound SoundFX("fx_flipperdown",DOFContactors):LeftFlipper.RotateToStart
	End If
End Sub
	  
Sub SolRFlipper(Enabled)
	If Enabled Then
		PlaySound SoundFX("fx_flipperup",DOFContactors):RightFlipper.RotateToEnd
	Else
		PlaySound SoundFX("fx_flipperdown",DOFContactors):RightFlipper.RotateToStart
	End If
End Sub

Sub rubber_Hit(idx):PlaySound "rubber":End Sub


'*******************************
'**     Keyboard Handlers     **
'*******************************

Sub Gorgar_KeyDown(ByVal KeyCode)
	'If keycode = LeftFlipperKey Then
	'	PlaySound "fx_flipperup", 0, .67, -0.05, 0.05
	'End If
    
	'If keycode = RightFlipperKey Then
	'	PlaySound "fx_flipperup", 0, .67, 0.05, 0.05
	'End If

	If keycode = PlungerKey Then
		Plunger.PullBack
		PlaySound "plungerpull",0,1,0.25,0.25
	End If
    If vpmKeyDown(KeyCode) Then Exit Sub 
End Sub

 
Sub Gorgar_KeyUp(ByVal KeyCode)
	'If keycode = LeftFlipperKey Then
	'	PlaySound "fx_flipperdown", 0, 1, -0.05, 0.05
	'End If
    
	'If keycode = RightFlipperKey Then
	'	PlaySound "fx_flipperdown", 0, 1, 0.05, 0.05
	'End If
	If keycode = PlungerKey Then
		Plunger.Fire
		PlaySound "plunger",0,1,0.25,0.25
	End If
    If vpmKeyUp(KeyCode) Then Exit Sub  
End Sub  


'********************************************
'**     Init The Table, Start VPinMAME     **
'********************************************
 
Dim GORtargets,GARtargets,bsLKicker,bsTrough,mtest,mMagnet,BallInPlay,plungerIM,x,ballOut


Sub Gorgar_Init
	On Error Resume Next
	With Controller
	.GameName="grgar_l1"
	.SplashInfoLine="Gorgar v1.0 By drumndav AKA daveboy6"
	.HandleKeyboard=0
	.ShowTitle=0
	.ShowDMDOnly=1
	.ShowFrame=0
		If Gorgar.ShowDT = false then
			'Scoretext.Visible = false
			.Hidden = 1
		End If

		If Gorgar.ShowDT = true then
		'Scoretext.Visible = false
			.Hidden = 0
		End If
	End With
	Controller.Run
	If Err Then MsgBox Err.Description
		On Error Goto 0

	PinMAMETimer.Interval=PinMAMEInterval:PinMAMETimer.Enabled=1:vpmNudge.TiltSwitch=1:vpmNudge.Sensitivity=4
	vpmNudge.TiltObj=Array(LeftSling,RightSling,TopJet,LeftJet,BottomJet)

	PlaySound "gorgar_feel_my_power"
	
	Set bsTrough=New cvpmBallStack 
		bsTrough.InitNoTrough BallRelease,9,85,7
		bsTrough.InitExitSnd SoundFX("Ballrelease",DOFContactors),SoundFX("solon",DOFContactors)


	Set GARtargets=New cvpmDropTarget
		GARtargets.InitDrop Array(Array(sw41),Array(sw42),Array(sw43)),Array(41,42,43)
		GARtargets.InitSnd SoundFX("droptargetdown",DOFContactors),SoundFX("droptargetreset",DOFContactors)
		GARtargets.AllDownSw=44

	Set GORtargets=New cvpmDropTarget 
		GORtargets.InitDrop Array(Array(sw18),Array(sw19),Array(sw20)),Array(18,19,20)
		GORtargets.InitSnd SoundFX("droptargetdown",DOFContactors),SoundFX("droptargetreset",DOFContactors)
		GORtargets.AllDownSw=21
		
	Set bsLKicker=New cvpmBallStack
		bsLKicker.InitSaucer sw15,15,155,8
		bsLKicker.InitExitSnd SoundFX("popper_ball",DOFContactors),SoundFX("solon",DOFContactors)
		
	Set mMagnet=New cvpmMagnet
 		With mMagnet
 		.InitMagnet sw23, 26
		.GrabCenter=False
 		End With

end sub    

'*****************************
'**     Switch Handling     ** 
'*****************************
 
Sub Drain_Hit : PlaySound "Drain" : bsTrough.AddBall Me : End Sub
Sub BallRelease_UnHit : Set BallInPlay = ActiveBall : End Sub				
Sub LeftSling_Slingshot   : vpmTimer.PulseSw 12 : PlaySound SoundFX("left_slingshot",DOFContactors), 0, 1, 0.05, 0.05 : End Sub 'switch 12
Sub RightSling_Slingshot   : vpmTimer.PulseSw 36 : PlaySound SoundFX("right_slingshot",DOFContactors),0,1,-0.05,0.05 : End Sub 'switch 12
Sub sw13_Slingshot   : vpmTimer.PulseSwitch 13, 0, 0 : End Sub
Sub sw16_Slingshot   : vpmTimer.PulseSwitch 16, 0, 0 : End Sub
Sub sw17_Slingshot   : vpmTimer.PulseSwitch 17, 0, 0 : End Sub
Sub sw22_Slingshot   : vpmTimer.PulseSwitch 22, 0, 0 : End Sub
Sub sw24_Slingshot   : vpmTimer.PulseSwitch 24, 0, 0 : End Sub
Sub sw25_Slingshot   : vpmTimer.PulseSwitch 25, 0, 0 : End Sub
Sub sw40_Slingshot   : vpmTimer.PulseSwitch 40, 0, 0 : End Sub
Sub sw30_Spin : vpmTimer.PulseSwitch 30, 0, 0 :PlaySound "Spinner",0,.25,0,0.25: End Sub



Sub sw15_Hit
	bsLKicker.AddBall 0
End Sub 				'switch 15

Sub sw18_Hit:GORtargets.Hit 1:End Sub                         'switch 18
Sub sw19_Hit:GORtargets.Hit 2:End Sub                         'switch 19
Sub sw20_Hit:GORtargets.Hit 3:End Sub                         'switch 20
Sub sw23_Hit:Controller.Switch(23)=1:mMagnet.AddBall ActiveBall:End Sub
Sub sw23_UnHit:Controller.Switch(23)=0:mMagnet.RemoveBall ActiveBall:End Sub
Sub LeftJet_Hit : vpmTimer.PulseSwitch 37, 0, 0 : PlaySound SoundFX("fx_bumper3",DOFContactors): End Sub
Sub TopJet_Hit : vpmTimer.PulseSwitch 38, 0, 0 : PlaySound SoundFX("fx_bumper3",DOFContactors): End Sub
Sub BottomJet_Hit : vpmTimer.PulseSwitch 39, 0, 0 : PlaySound SoundFX("fx_bumper3",DOFContactors) :End Sub
Sub sw41_Hit:GARtargets.Hit 1:End Sub                        'switch 41
Sub sw42_Hit:GARtargets.Hit 2:End Sub                        'switch 42
Sub sw43_Hit:GARtargets.Hit 3:End Sub                        'switch 43

dim intensScale:intensScale=0
dim scaleStep:scaleStep=0.8
 Sub MagnetFlash(Enabled)
		If Enabled Then
			pitLamp.state=1
			pitLamp2.state=1
			pitLamp3.state=1
			intensScale = intensScale + scaleStep
			if intensScale>=1.0 Then intensScale=1.0 
			pitLamp.IntensityScale = intensScale
			pitLamp2.IntensityScale = intensScale
			pitLamp3.IntensityScale = intensScale
		Else
			intensScale = intensScale - scaleStep
			if intensScale<0.0 then intensScale=0.0:pitLamp.state=0:pitLamp2.state=0:pitLamp3.state=0:end if
			pitLamp.IntensityScale = intensScale
			pitLamp2.IntensityScale = intensScale
			pitLamp3.IntensityScale = intensScale
		End If
 End Sub

  
'***********************************
'**     Map Lights Into Array     **
'** Set Unmapped Lamps To Nothing **
'***********************************

Set Lights(1)=Light1 'Same Player Shoots Again (Playfield)
Set Lights(2)=Light2 'Left Special
Set Lights(3)=Light3 'Right special
Set Lights(4)=Light4 '2X
Set Lights(5)=Light5 '3X
Set Lights(6)=Light6 'Star 1
Set Lights(7)=Light7 'Star 2
Set Lights(8)=Light8 '1,000 Bonus
Set Lights(9)=Light9 '2.000 Bonus
Set Lights(10)=Light10 '3,000 Bonus
Set Lights(11)=Light11 '4,000 Bonus
Set Lights(12)=Light12 '5,000 Bonus
Set Lights(13)=Light13 '6,000 Bonus
Set Lights(14)=Light14 '7,000 Bonus
Set Lights(15)=Light15 '8,000 Bonus
Set Lights(16)=Light16 '9,000 Bonus
'Light17 NOT USED
Set Lights(18)=Light18 '10,000 Bonus
Set Lights(19)=Light19 '20,000 Bonus
Set Lights(20)=Light20 'A
Set Lights(21)=Light21 'B
Set Lights(22)=Light22 'C
Set Lights(23)=Light23 'D
Set Lights(24)=Light24 'E
Set Lights(25)=Light25 '1 Target
Set Lights(26)=Light26 '2 Target
Set Lights(27)=Light27 '3 Target
Set Lights(28)=Light28 '4 Target
Set Lights(29)=Light29 '1 Target Arrow
Set Lights(30)=Light30 '2 Target Arrow
Set Lights(31)=Light31 '3 Target Arrow
Set Lights(32)=Light32 '4 Target Arrow
Set Lights(33)=Light33 'Magnet 5,000
Set Lights(34)=Light34 'Magnet 10,000
Set Lights(35)=Light35 'Magnet 20,000
Set Lights(36)=Light36 'Magnet 30,000
Set Lights(37)=Light37 'Magnet 50,000
Set Lights(38)=Light70  'Top Jet Bumper
Set Lights(39)=Light71 'Left Jet Bumper
Set Lights(40)=Light69 'Bottom Jet Bumper
Set Lights(41)=Light41 'GAR 5,000 When Lit
Set Lights(42)=Light42 'GOR
Set Lights(43)=Light43 'GAR
Set Lights(44)=Light44 'Eject Hole 10,000
Set Lights(45)=Light45 'Eject Hole 15,000
Set Lights(46)=Light46 'Eject Hole Extra Ball
'Light47 NOT USED
Set Lights(48)=Light48 'Spinner 1,000 When Lit 



'**********************************
'**     Table-Specific Stuff     **
'**********************************

Sub sw31_Hit:vpmTimer.PulseSw 31:PlaySound SoundFX("droptargetR",DOFContactors):End Sub
Sub sw32_Hit:vpmTimer.PulseSw 32:PlaySound SoundFX("droptargetR",DOFContactors):End Sub
Sub sw33_Hit:vpmTimer.PulseSw 33:PlaySound SoundFX("droptargetR",DOFContactors):End Sub
Sub sw14_Hit:vpmTimer.PulseSw 14:PlaySound SoundFX("droptargetL",DOFContactors):End Sub


Sub sw10_Hit:   Controller.Switch(10)=1 : End Sub
Sub sw10_unHit: Controller.Switch(10)=0 : End Sub
Sub sw11_Hit:   Controller.Switch(11)=1 : End Sub
Sub sw11_unHit: Controller.Switch(11)=0 : End Sub
Sub sw34_Hit:   Controller.Switch(34)=1 : End Sub
Sub sw34_unHit: Controller.Switch(34)=0 : End Sub
Sub sw35_Hit:   Controller.Switch(35)=1 : End Sub
Sub sw35_unHit: Controller.Switch(35)=0 : End Sub
Sub sw24_Hit:   Controller.Switch(26)=1 : End Sub
Sub sw24_unHit: Controller.Switch(26)=0 : End Sub
Sub sw27_Hit:   Controller.Switch(27)=1 : End Sub
Sub sw27_unHit: Controller.Switch(27)=0 : End Sub
Sub sw28_Hit:   Controller.Switch(28)=1 : End Sub
Sub sw28_unHit: Controller.Switch(28)=0 : End Sub


' *********************************************************************
'                      Supporting Ball & Sound Functions
' *********************************************************************

Function Vol(ball) ' Calculates the Volume of the sound based on the ball speed
    Vol = Csng(BallVel(ball) ^2 / 2000)
End Function

Function Pan(ball) ' Calculates the pan for a ball based on the X position on the table. "table1" is the name of the table
    Dim tmp
    tmp = ball.x * 2 / Gorgar.width-1
    If tmp > 0 Then
        Pan = Csng(tmp ^10)
    Else
        Pan = Csng(-((- tmp) ^10) )
    End If
End Function

Function Pitch(ball) ' Calculates the pitch of the sound based on the ball speed
    Pitch = BallVel(ball) * 20
End Function

Function BallVel(ball) 'Calculates the ball speed
    BallVel = INT(SQR((ball.VelX ^2) + (ball.VelY ^2) ) )
End Function

'*****************************************
'      JP's VP10 Rolling Sounds
'*****************************************

Const tnob = 5 ' total number of balls
ReDim rolling(tnob)
InitRolling

Sub InitRolling
    Dim i
    For i = 0 to tnob
        rolling(i) = False
    Next
End Sub

Sub RollingTimer_Timer()
    Dim BOT, b
    BOT = GetBalls

	if sw43.isDropped=1 then 
		dropLight1.state=1
	Else
		light52.state=1
		dropLight1.state=0
	end If
	if sw42.isDropped=1 then 
		dropLight2.state=1
	Else
		dropLight2.state=0
	end If

	' stop the sound of deleted balls
    For b = UBound(BOT) + 1 to tnob
        rolling(b) = False
        StopSound("fx_ballrolling" & b)
    Next

	' exit the sub if no balls on the table
    If UBound(BOT) = -1 Then Exit Sub

	' play the rolling sound for each ball
    For b = 0 to UBound(BOT)
        If BallVel(BOT(b) ) > 1 AND BOT(b).z < 30 Then
            rolling(b) = True
            PlaySound("fx_ballrolling" & b), -1, Vol(BOT(b) ), Pan(BOT(b) ), 0, Pitch(BOT(b) ), 1, 0
        Else
            If rolling(b) = True Then
                StopSound("fx_ballrolling" & b)
                rolling(b) = False
            End If
        End If
    Next
End Sub

'**********************
' Ball Collision Sound
'**********************

Sub OnBallBallCollision(ball1, ball2, velocity)
	PlaySound("fx_collide"), 0, Csng(velocity) ^2 / 2000, Pan(ball1), 0, Pitch(ball1), 0, 0
End Sub



'************************************
' What you need to add to your table
'************************************

' a timer called RollingTimer. With a fast interval, like 10
' one collision sound, in this script is called fx_collide
' as many sound files as max number of balls, with names ending with 0, 1, 2, 3, etc
' for ex. as used in this script: fx_ballrolling0, fx_ballrolling1, fx_ballrolling2, fx_ballrolling3, etc


'******************************************
' Explanation of the rolling sound routine
'******************************************

' sounds are played based on the ball speed and position

' the routine checks first for deleted balls and stops the rolling sound.

' The For loop goes through all the balls on the table and checks for the ball speed and 
' if the ball is on the table (height lower than 30) then then it plays the sound
' otherwise the sound is stopped, like when the ball has stopped or is on a ramp or flying.

' The sound is played using the VOL, PAN and PITCH functions, so the volume and pitch of the sound
' will change according to the ball speed, and the PAN function will change the stereo position according
' to the position of the ball on the table.


'**************************************
' Explanation of the collision routine
'**************************************

' The collision is built in VP.
' You only need to add a Sub OnBallBallCollision(ball1, ball2, velocity) and when two balls collide they 
' will call this routine. What you add in the sub is up to you. As an example is a simple Playsound with volume and paning
' depending of the speed of the collision.


Sub Pins_Hit (idx)
	PlaySound "pinhit_low", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 0, 0
End Sub

Sub Targets_Hit (idx)
	PlaySound "target", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 0, 0
End Sub

Sub Metals_Hit (idx)
	PlaySound "metalhit_medium", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
End Sub

Sub Gates_Hit (idx)
	PlaySound "gate4", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
End Sub

Sub Rubbers_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 20 then 
		PlaySound "fx_rubber2", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
	End if
	If finalspeed >= 6 AND finalspeed <= 20 then
 		RandomSoundRubber()
 	End If
End Sub

Sub Posts_Hit(idx)
 	dim finalspeed
  	finalspeed=SQR(activeball.velx * activeball.velx + activeball.vely * activeball.vely)
 	If finalspeed > 16 then 
		PlaySound "fx_rubber2", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
	End if
	If finalspeed >= 6 AND finalspeed <= 16 then
 		RandomSoundRubber()
 	End If
End Sub

Sub RandomSoundRubber()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound "rubber_hit_1", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
		Case 2 : PlaySound "rubber_hit_2", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
		Case 3 : PlaySound "rubber_hit_3", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
	End Select
End Sub

Sub LeftFlipper_Collide(parm)
 	RandomSoundFlipper()
End Sub

Sub RightFlipper_Collide(parm)
 	RandomSoundFlipper()
End Sub

Sub RandomSoundFlipper()
	Select Case Int(Rnd*3)+1
		Case 1 : PlaySound "flip_hit_1", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
		Case 2 : PlaySound "flip_hit_2", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
		Case 3 : PlaySound "flip_hit_3", 0, Vol(ActiveBall), Pan(ActiveBall), 0, Pitch(ActiveBall), 1, 0
	End Select
End Sub
